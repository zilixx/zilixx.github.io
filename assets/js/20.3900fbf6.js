(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{421:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#三个角色"}},[t._v("三个角色")])]),a("li",[a("a",{attrs:{href:"#如何编译"}},[t._v("如何编译？")])]),a("li",[a("a",{attrs:{href:"#make和configure"}},[t._v("make和configure")])]),a("li",[a("a",{attrs:{href:"#下载gcc"}},[t._v("下载gcc")])]),a("li",[a("a",{attrs:{href:"#查看build-essential依赖"}},[t._v("查看build-essential依赖")])]),a("li",[a("a",{attrs:{href:"#查看gcc版本"}},[t._v("查看gcc版本")])]),a("li",[a("a",{attrs:{href:"#使用gcc编译和测试执行"}},[t._v("使用gcc编译和测试执行")])]),a("li",[a("a",{attrs:{href:"#生成目标文件目的"}},[t._v("生成目标文件目的")])]),a("li",[a("a",{attrs:{href:"#使用make进行宏编译"}},[t._v("使用make进行宏编译")])])])]),a("p"),t._v(" "),a("h1",{attrs:{id:"linux与可执行文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux与可执行文件"}},[t._v("#")]),t._v(" Linux与可执行文件")]),t._v(" "),a("p",[t._v("Linux系统上面，一个文件能否执行需要看有没有可执行的权限。实际上linux能真正识别的可执行文件是二进制文件，如"),a("code",[t._v("passwd")]),t._v("，"),a("code",[t._v("bash")]),t._v("等，这些其实都是二进制文件。\nLinux中使用"),a("code",[t._v("file")]),t._v("命令可以查看一个文件是否为二进制文件。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" /usr/bin/bash\n\n/bin/bash: ELF "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v("-bit LSB shared object, x86-64, version "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SYSV"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sha1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("2a9f157890930ced4c3ad0e74fc1b1b84aad71e6, "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" GNU/Linux "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.2")]),t._v(".0, stripped \n")])])]),a("p",[t._v("返回信息的意思是"),a("code",[t._v("ELF 64-bit LSB")]),t._v("，其中"),a("code",[t._v("LSB")]),t._v("代表"),a("code",[t._v("linux standard base")]),t._v("，翻译为linux标准，该标准的目的是为了让软件在支持LSB标准的系统上运行。"),a("code",[t._v("LSB")]),t._v("也帮助软件产品可以一直到Linux系统上。 "),a("br"),t._v("\n与windows的PE可执行文件不同，linux的可执行文件格式是"),a("code",[t._v("ELF(Executable and Linkable Format)")]),t._v("，"),a("code",[t._v("ELF")]),t._v("格式文件包括二进制文件、可执行文件、目标代码、共享库和核心转储格式文件。"),a("code",[t._v("ELF")]),t._v("格式的文件结构如下:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("ELF header")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("program header table")])]),t._v(" "),a("tr",[a("td",[t._v(".text")])]),t._v(" "),a("tr",[a("td",[t._v(".rodata")])]),t._v(" "),a("tr",[a("td",[t._v("...")])]),t._v(" "),a("tr",[a("td",[t._v(".data")])]),t._v(" "),a("tr",[a("td",[t._v("section header table")])])])]),t._v(" "),a("p",[t._v("其中"),a("code",[t._v("program header table")]),t._v("作用是告诉系统如何构建进程的镜像，中间的隐藏文件(称为section)存储的是各种指令数据、符号数据重定位数据等。"),a("code",[t._v("section header table")]),t._v("相当于每个"),a("code",[t._v("section")]),t._v("的注册表，包含了"),a("code",[t._v("section")]),t._v("的大小以及名字。")]),t._v(" "),a("h1",{attrs:{id:"如何构建二进制可执行文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何构建二进制可执行文件"}},[t._v("#")]),t._v(" 如何构建二进制可执行文件")]),t._v(" "),a("h2",{attrs:{id:"三个角色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三个角色"}},[t._v("#")]),t._v(" 三个角色")]),t._v(" "),a("p",[t._v("使用高级程序语言的源码->编译程序->可执行文件(二进制文件)")]),t._v(" "),a("h2",{attrs:{id:"如何编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何编译"}},[t._v("#")]),t._v(" 如何编译？")]),t._v(" "),a("p",[t._v("Linux最标准的语言c语言，在linux上使用高级语言编译程序gcc(GNU Compiler Collection) 其中包括"),a("code",[t._v("c，c++，java，objective-c")]),t._v("编译器，即可制作一个可执行的二进制程序。\n编译过程中，会生成以"),a("code",[t._v("*.o")]),t._v("为后缀的目标文件。另外在程序中也会调用一些其他软件的函数功能。因此在编译的过程中会将该函数库加进去，也就是将程序代码和函数库做链接，最终生成可执行文件。")]),t._v(" "),a("h2",{attrs:{id:"make和configure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make和configure"}},[t._v("#")]),t._v(" make和configure")]),t._v(" "),a("p",[t._v("一般来说，一套软件的程序代码，含有主程序和子程序。而在代码编译的过程中不仅需要对每个主程序及子程序写编译过程的命令，而且需要写链接程序编译命令。此时可以用make来对编译过程进行简化操作。\n"),a("code",[t._v("make")]),t._v("命令会在当前目录下搜索"),a("code",[t._v("makefile")]),t._v("，其中记录了源码编译的信息。然后更新可执行文件。\n通常情况下，由于不同用户的操作环境不同，软件开发者会在程序中加入检测程序，这个程序文件一般为"),a("code",[t._v("configure")]),t._v("。如果用户的操作环境具备软件开发所需要的功能，检测程序就会新建"),a("code",[t._v("makefile")]),t._v("文件。 "),a("br"),t._v("\n流程如下： "),a("br"),t._v("\n源代码->"),a("code",[t._v("configure")]),t._v("找到需要的函数库、编译器及其他资料->"),a("code",[t._v("makefile")]),t._v("->使用"),a("code",[t._v("make")]),t._v(" "),a("br"),t._v("\n不同的linux发布版本不同，其函数库文件防止路径或者函数库文件名定义皆不同。因此在一个linux发布版本上的二进制文件，在其他版本上是不会执行成功的。")]),t._v(" "),a("h1",{attrs:{id:"编译实操"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译实操"}},[t._v("#")]),t._v(" 编译实操")]),t._v(" "),a("p",[t._v("linux两大发行版主流，Red Hat和Debian，分别使用RPM和DPKG来进行软件管理。一般用户常用的Centos是使用RPM作为包管理，而Ubuntu是使用DPKG。下面演示以ubuntu为例。")]),t._v(" "),a("h2",{attrs:{id:"下载gcc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下载gcc"}},[t._v("#")]),t._v(" 下载gcc")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" update "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" build-essential "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装编译依赖")]),t._v("\n")])])]),a("h2",{attrs:{id:"查看build-essential依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看build-essential依赖"}},[t._v("#")]),t._v(" 查看build-essential依赖")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-cache")]),t._v(" depends\n\nbuild-essential\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("Depends: libc6-dev\n  Depends: "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("libc-dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    libc6-dev\n  Depends: gcc\n  Depends: g++\n  Depends: "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v("\n    make-guile\n  Depends: dpkg-dev\n")])])]),a("p",[t._v("可以看到build-essential内置了编译c/c++所需要的软件包")]),t._v(" "),a("h2",{attrs:{id:"查看gcc版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看gcc版本"}},[t._v("#")]),t._v(" 查看gcc版本")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("gcc --version\n")])])]),a("h2",{attrs:{id:"使用gcc编译和测试执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用gcc编译和测试执行"}},[t._v("#")]),t._v(" 使用gcc编译和测试执行")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("gcc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不带参数的情况下，默认产生a.out，该文件是在linux系统下的可执行文件。可选参数-O。该参数可以依据操作环境给予优化执行速度。")]),t._v("\ngcc -c "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成*.o目标文件，-c参数代表编译但不链接其他函数库。")]),t._v("\ngcc -o "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("*.o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成可执行文件，-o参数后面跟输出的可执行文件名，以及目标文件。可选参数-Wall，表示严格编译，此时可能会有警告信息。")]),t._v("\ngcc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lib"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("path1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("path2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当程序使用外部库时，需要在编译时声明使用的函数库，-l参数后接的是对应的函数库名称；-L后面跟的是库存储的地址信息。")]),t._v("\n")])])]),a("h2",{attrs:{id:"生成目标文件目的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成目标文件目的"}},[t._v("#")]),t._v(" 生成目标文件目的")]),t._v(" "),a("p",[t._v("由于源码文件通常包含多个文件，因此无法直接进行编译，这时需要先生成目标文件，然后再用链接生成二进制可执行文件。如果对其中的某一个文件进行了修改，则需要重新编译改文件来产生新的目标文件，之后再链接制作出可执行的二进制文件。这样做的好处是不需要动其他未进行改动的代码文件。\n最终的可执行文件包括所有链接的目标文件和使用库以及启动代码。")]),t._v(" "),a("h2",{attrs:{id:"使用make进行宏编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用make进行宏编译"}},[t._v("#")]),t._v(" 使用make进行宏编译")]),t._v(" "),a("p",[a("code",[t._v("make")]),t._v("的功能是简化编译过程中的执行命令。在源码文件特别多的情况下，"),a("code",[t._v("make")]),t._v("可以简化编译流程。\n首先需要构建"),a("code",[t._v("makefile")]),t._v("文件，在文件中加入之前的编译命令。在终端使用"),a("code",[t._v("make")]),t._v("命令会自动搜索"),a("code",[t._v("makefile")]),t._v("文件内容。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("object file1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("object file2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#自定义依赖关系")]),t._v("\n   gcc -o "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("object file1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("object file2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". -lm  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#生成目标文件/可执行文件")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#进行编译")]),t._v("\n")])])]),a("p",[t._v("make后可跟目标名，如二进制文件，目标文件，或者"),a("code",[t._v("clean")]),t._v("操作。"),a("code",[t._v("clean")]),t._v("操作代表清除，"),a("code",[t._v("clean")]),t._v("信息可以加入删除目标文件或者可执行文件操作。这样使用"),a("code",[t._v("make clean")]),t._v("会删除目标文件。")])])}),[],!1,null,null,null);a.default=n.exports}}]);